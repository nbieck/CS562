#version 440

layout(local_size_x = 1, local_size_y = 128) in;
const float PI = 3.14159265359;
const int max_width = 50;
uniform int filter_width = 25;

const float s = 0.01;

layout(binding = 0, r8) uniform restrict readonly image2D img_in;
layout(binding = 1, r8) uniform restrict writeonly image2D img_out;
layout(binding = 2, rgba32f) uniform restrict readonly image2D PositionBuffer;
layout(binding = 3, rgba32f) uniform restrict readonly image2D NormalBuffer;

layout(std430, binding = 0) buffer FilterKernel 
{
    float weights[2 * max_width + 1]; 
};

shared float pixels[128 + 2 * max_width];
shared vec4 blur_data[128 + 2 * max_width];

vec4 LoadNormalDepth(ivec2 location)
{
    return vec4(imageLoad(NormalBuffer, location).xyz, imageLoad(PositionBuffer, location).w);
}

void main()
{
    //get pixels from image to group local storage
    ivec2 pixel_loc = ivec2(gl_GlobalInvocationID.xy);
    int local_idx = int(gl_LocalInvocationID.y);

    pixels[local_idx] = imageLoad(img_in, pixel_loc - ivec2(0, filter_width)).r;
    blur_data[local_idx] = LoadNormalDepth(pixel_loc - ivec2(0, filter_width));
    if (local_idx < 2 * filter_width)
    {
        pixels[128 + local_idx] = imageLoad(img_in, pixel_loc + ivec2(0, 128 - filter_width)).r;
        blur_data[128 + local_idx] = LoadNormalDepth(pixel_loc + ivec2(0, 128 - filter_width));
    }

    //barrier
    barrier();

    float result_color = 0.0;
    float weights_sum = 0.0;

    vec4 my_data = blur_data[local_idx + filter_width];

    //perform blur
    for (int i = 0; i <= 2 * filter_width; ++i)
    {
        vec4 pix_data = blur_data[local_idx + i];
        float range_kernel = max(0, dot(pix_data.xyz, my_data.xyz)) * (1.0 / sqrt(2 * PI * s)) * exp(-(pix_data.w - my_data.w) * (pix_data.w - my_data.w) / (2 * s));

        float weight = range_kernel * weights[i];
    
        result_color += weight * pixels[local_idx + i];
        weights_sum += weight;
    }

    result_color /= weights_sum;

    imageStore(img_out, pixel_loc, vec4(result_color));
}

